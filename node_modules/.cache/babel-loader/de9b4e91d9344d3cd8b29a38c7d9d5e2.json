{"ast":null,"code":"var _jsxFileName = \"/home/internjs/clone/DID_YOU_MEAN/src/pages/client/main-page.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Dictionary from \"../../data/dictionary.json\"; // Extends a collection of HTML form control elements.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lastInput = \"\";\nlet lastOutput = \"\"; // Return true if the current word is in the dictionary\n\nfunction isInTheDictionary(currentWord) {\n  const currentWordCase = currentWord.toLowerCase(); // loop through the dictionary.\n\n  for (let i of Dictionary) {\n    if (i.word.toLowerCase() === currentWordCase) {\n      return true;\n    }\n  }\n\n  return false;\n} // Return the word which contains 95% or 50% of the current word2\n// If there's no slightly similar then just return the current word\n\n\nfunction findNearestSuggestion(currentWord) {\n  // Loop through the dictionary.\n  if (currentWord === lastInput) {\n    return lastOutput;\n  }\n\n  for (let j of Dictionary) {\n    let currentWordSplit = currentWord.split(\"\");\n    let currentWordDictionarySplit = j.word.split(\"\");\n    let currentDictionaryWordLength = j.word.length;\n    let letterMatchCount = 0; // Loop in in the splitted words of current word and current word in the dictionary\n    // MUST: be delegated as it is repeating.\n\n    for (let k in currentWordDictionarySplit) {\n      // [a][b][i][l][i][t][y]\n      // [a][b][i]\n      // 3\n      for (let i in currentWordSplit) {\n        if (currentWordSplit[i] === currentWordDictionarySplit[k] && currentWordSplit.indexOf(currentWordSplit[i]) == currentWordDictionarySplit.indexOf(currentWordDictionarySplit[k])) {\n          letterMatchCount++;\n        }\n      }\n    }\n\n    if ( // letterMatchCount >= 3\n    // ||\n    // letterMatchCount > Math.floor(0.25 * currentDictionaryWordLength) &&\n    letterMatchCount > Math.floor(0.6 * currentDictionaryWordLength)) {\n      lastOutput = j.word;\n      return (// \"current dict length : \" +\n        // Math.floor(0.5 * currentDictionaryWordLength).toString() +\n        // \": current length: \" +\n        j.word\n      );\n    }\n  }\n\n  lastInput = currentWord;\n  lastOutput = currentWord;\n  return lastOutput;\n}\n\nfunction extracted(input) {\n  const inputSplitWhiteSpace = input.split(\" \");\n  let paraphrased = \"\";\n\n  for (let currentWord of inputSplitWhiteSpace) {\n    // If a word is not in the dictionary store find the closest word.\n    const validateWord = isInTheDictionary(currentWord) ? currentWord : findNearestSuggestion(currentWord);\n    paraphrased += validateWord + \" \";\n  }\n\n  console.log(\"Did you mean: \" + paraphrased);\n  return paraphrased;\n}\n\nfunction MainPage() {\n  _s();\n\n  const [paraphrasedWord, setParaphrasedWord] = React.useState();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setParaphrasedWord(extracted(event.currentTarget.phrase.value));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-full flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-md w-full space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"mt-6 text-center text-xl font-extrabold \",\n            children: \"phrase?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"mt-8 space-y-6\",\n          action: \"#\",\n          method: \"GET\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rounded-md shadow-sm -space-y-px\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email-address\",\n                className: \"sr-only\",\n                children: \"Phrase\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"phrase\",\n                name: \"phrase\",\n                type: \"text\",\n                autoComplete: \"phrase\",\n                required: true,\n                className: \"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\",\n                placeholder: \"Input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\",\n              children: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }, this), \"Did yo ass mean\", /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"italic font-bold\",\n      children: paraphrasedWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MainPage, \"ccOQq7JKXUFBDib2oM6F2ZaUjgo=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","Dictionary","lastInput","lastOutput","isInTheDictionary","currentWord","currentWordCase","toLowerCase","i","word","findNearestSuggestion","j","currentWordSplit","split","currentWordDictionarySplit","currentDictionaryWordLength","length","letterMatchCount","k","indexOf","Math","floor","extracted","input","inputSplitWhiteSpace","paraphrased","validateWord","console","log","MainPage","paraphrasedWord","setParaphrasedWord","useState","handleSubmit","event","preventDefault","currentTarget","phrase","value"],"sources":["/home/internjs/clone/DID_YOU_MEAN/src/pages/client/main-page.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Dictionary from \"../../data/dictionary.json\";\n// Extends a collection of HTML form control elements.\ninterface FormElements extends HTMLFormControlsCollection {\n\tphrase: HTMLInputElement;\n}\ninterface PhraseInputElement extends HTMLFormElement {\n\telements: FormElements;\n}\n\nlet lastInput: string = \"\";\nlet lastOutput: string = \"\";\n\n// Return true if the current word is in the dictionary\nfunction isInTheDictionary(currentWord: string) {\n\tconst currentWordCase = currentWord.toLowerCase();\n\t// loop through the dictionary.\n\n\tfor (let i of Dictionary) {\n\t\tif (i.word.toLowerCase() === currentWordCase) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n// Return the word which contains 95% or 50% of the current word2\n// If there's no slightly similar then just return the current word\nfunction findNearestSuggestion(currentWord: string): string {\n\t// Loop through the dictionary.\n\tif (currentWord === lastInput) {\n\t\treturn lastOutput;\n\t}\n\tfor (let j of Dictionary) {\n\t\tlet currentWordSplit: string[] = currentWord.split(\"\");\n\t\tlet currentWordDictionarySplit: string[] = j.word.split(\"\");\n\t\tlet currentDictionaryWordLength: number = j.word.length;\n\t\tlet letterMatchCount: number = 0;\n\t\t// Loop in in the splitted words of current word and current word in the dictionary\n\t\t// MUST: be delegated as it is repeating.\n\t\tfor (let k in currentWordDictionarySplit) {\n\t\t\t// [a][b][i][l][i][t][y]\n\t\t\t// [a][b][i]\n\t\t\t// 3\n\t\t\tfor (let i in currentWordSplit) {\n\t\t\t\tif (\n\t\t\t\t\tcurrentWordSplit[i] === currentWordDictionarySplit[k] &&\n\t\t\t\t\tcurrentWordSplit.indexOf(currentWordSplit[i]) ==\n\t\t\t\t\t\tcurrentWordDictionarySplit.indexOf(currentWordDictionarySplit[k])\n\t\t\t\t) {\n\t\t\t\t\tletterMatchCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t// letterMatchCount >= 3\n\t\t\t// ||\n\t\t\t// letterMatchCount > Math.floor(0.25 * currentDictionaryWordLength) &&\n\t\t\tletterMatchCount > Math.floor(0.6 * currentDictionaryWordLength)\n\t\t) {\n\t\t\tlastOutput = j.word;\n\t\t\treturn (\n\t\t\t\t// \"current dict length : \" +\n\t\t\t\t// Math.floor(0.5 * currentDictionaryWordLength).toString() +\n\t\t\t\t// \": current length: \" +\n\t\t\t\tj.word\n\t\t\t);\n\t\t}\n\t}\n\tlastInput = currentWord;\n\tlastOutput = currentWord;\n\treturn lastOutput;\n}\n\nfunction extracted(input: string): string {\n\tconst inputSplitWhiteSpace: string[] = input.split(\" \");\n\tlet paraphrased: string = \"\";\n\tfor (let currentWord of inputSplitWhiteSpace) {\n\t\t// If a word is not in the dictionary store find the closest word.\n\t\tconst validateWord: string | boolean = isInTheDictionary(currentWord)\n\t\t\t? currentWord\n\t\t\t: findNearestSuggestion(currentWord);\n\t\tparaphrased += validateWord + \" \";\n\t}\n\tconsole.log(\"Did you mean: \" + paraphrased);\n\treturn paraphrased;\n}\n\nfunction MainPage() {\n\tconst [paraphrasedWord, setParaphrasedWord] = React.useState<string>();\n\n\tfunction handleSubmit(event: React.FormEvent<PhraseInputElement>) {\n\t\tevent.preventDefault();\n\t\tsetParaphrasedWord(extracted(event.currentTarget.phrase.value));\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"min-h-full flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n\t\t\t\t<div className=\"max-w-md w-full space-y-8\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2 className=\"mt-6 text-center text-xl font-extrabold \">\n\t\t\t\t\t\t\tphrase?\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<form\n\t\t\t\t\t\tclassName=\"mt-8 space-y-6\"\n\t\t\t\t\t\taction=\"#\"\n\t\t\t\t\t\tmethod=\"GET\"\n\t\t\t\t\t\tonSubmit={handleSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"rounded-md shadow-sm -space-y-px\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<label htmlFor=\"email-address\" className=\"sr-only\">\n\t\t\t\t\t\t\t\t\tPhrase\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"phrase\"\n\t\t\t\t\t\t\t\t\tname=\"phrase\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tautoComplete=\"phrase\"\n\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\tclassName=\"appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Input\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tclassName=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tinput\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\tDid yo ass mean\n\t\t\t<h5 className=\"italic font-bold\">{paraphrasedWord}</h5>\n\t\t</div>\n\t);\n}\nexport default MainPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}